{
  "hash": "378be0f67a7cad010be6b170b99414bf",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Optimización Combinatoria\"\nformat: \n  html:\n    fig-width: 8      # Ancho de las figuras en pulgadas para HTML\n    fig-height: 6     # Alto de las figuras en pulgadas para HTML\n    number-sections: true\n    code-fold: true\n    toc: true\n    toc-title: \"Tabla de contenido\"\n    toc-location: left-body\n    css: custom.css\nauthor:\n  - name: \"Diego Fernando Chávez Henao, dfchavez@unal.edu.co\"\n  - name: \"Alejandro Feria González, aferiag@unal.edu.co\"\n  - name: \"Santiago Molina Muñoz, smolinam@unal.edu.co\"\n  - name: \"Juan Manuel Teherán Machado, jteheranm@unal.edu.co\"\ndate: \"2024-05-02\"\ncategories: [optimización, Colonia de Hormigas, Algorítmos Genéticos, R]\nimage: \"image.jpg\"\n#bibliography: ref.bib\npage-layout: full\nexecute:\n  cache: true\n---\n\n\n\n------------------------------------------------------------------------\n\n**ENUCIADO DEL PROBLEMA**\n\nUn vendedor debe hacer un recorrido por todas y cada de las 13 ciudades principales de Colombia.\n\nUtilice colonias de hormigas y algoritmos genéticos para encontrar el orden óptimo. El costo de desplazamiento entre ciudades es la suma del valor de la hora del vendedor (es un parámetro que debe estudiarse), el costo de los peajes y el costo del combustible. Cada equipo debe definir en qué carro hace el recorrido el vendedor y de allí extraer el costo del combustible.\n\nAdicionalmente represente con un gif animado o un video cómo se comporta la mejor solución usando un gráfico del recorrido en el mapa de Colombia.\n\n------------------------------------------------------------------------\n\n# **Introducción**\n\nEl Problema del Viajante de Comercio (*Traveling Salesman Problem*, TSP) es uno de los problemas más clásicos y estudiados en el campo de la optimización combinatoria (Goodfellow et al., 2016; Zhang et al., 2020). Plantea el reto de encontrar la ruta de menor costo que permita a un vendedor visitar exactamente una vez cada ciudad de un conjunto y retornar al punto de partida. En el contexto colombiano, la optimización de rutas es especialmente relevante debido a la complejidad de la red vial, la alta densidad de peajes y los elevados costos logísticos (Infobae, 2025).\n\nEste trabajo busca determinar la ruta óptima para un vendedor que debe recorrer las 13 ciudades principales del país, minimizando el costo total que incluye costos de salario, peajes y combustible. Para ello se implementan dos enfoques bioinspirados: *algoritmos genéticos* (GA) y *algoritmos de colonia de hormigas* (ACO), comparando su desempeño, analizando la calidad de las soluciones y visualizando los recorridos óptimos sobre el mapa de Colombia.\n\n# **Marco Teórico**\n\n## **El Problema del Viajante de Comercio (TSP)**\n\nEl Problema del Viajante de Comercio (TSP, por sus siglas en inglés) es uno de los problemas más emblemáticos de la optimización combinatoria y de la investigación de operaciones. Consiste en encontrar la ruta de menor costo que permita a un viajante visitar una vez cada ciudad de un conjunto dado y regresar al punto de partida (Zhang et al., 2020). Este problema es *NP-hard*, lo que significa que el número de posibles rutas crece factorialmente con el número de ciudades, volviendo inviable la búsqueda exhaustiva para instancias de tamaño moderado (Goodfellow et al., 2016).\n\nMatemáticamente, el TSP se modela mediante un grafo completo donde cada nodo representa una ciudad y cada arista tiene un costo asociado (Goodfellow et al., 2016). Como ejemplo de costo asociado tenemos distancia, tiempo, dinero, etc. El objetivo es encontrar el ciclo hamiltoniano de menor costo, es decir, un camino que pase una única vez por cada ciudad, retorne al origen, y minimice la suma de los costos (Zhang et al., 2020).\n\n### Supuestos para el Salario\n\n**Se asume un valor monetario por hora de trabajo de \\$25.000 COP/hora**, definido según parámetros del mercado laboral colombiano, Con este valor se puede estimar el costo del salario que debe pagarse al viajante por ir desde la ciudad $i$ a la ciudad $j$, mediante la siguiente expresión:\n\n$\\text{Costo del salario del viajante}_{ij} = V_h \\cdot T_{ij} \\tag{1}$\n\ndonde\n\n-   $V_h$: Valor de la hora de trabajo del vendedor (COP/hora), asumido como \\$25.000 COP/hora\n\n-   $T_{ij}$: Tiempo de viaje desde la ciudad $i$ a la ciudad $j$ (horas)\n\n### Supuestos paro los Peajes\n\nColombia cuenta con 180 peajes en la red vial nacional (Infobae, 2025). Aunque existe un proyecto de ley para que los peajes no puedan ubicarse a menos de 150 kilómetros entre sí (Infobae, 2025), en la práctica la distancia promedio entre peajes es de 50 a 70 km. Por ejemplo, el trayecto Medellín–Bogotá (415 km) tiene 8 peajes, y el trayecto Cali–Barranquilla (1000 km) tiene 15 peajes.\n\n**Asumiendo un peaje cada 60 km recorridos**, se estima el número de peajes entre las ciudades $i$ y $j$ como:\n\n$P_{ij}= \\mathrm{Redondear}\\left(\\frac{\\text{Distancia (km)}}{60\\,\\text{km}}\\right) \\tag{2}$\n\n**Suponiendo un costo promedio por peaje de** \\$25.000 COP, el costo de los peajes entre las ciudades $i$ y $j$ se calcula como:\n\n$\\text{Costo de los peajes}_{ij} = P_{ij} \\cdot C_p \\tag{3}$\n\ndonde\n\n-   $P_{ij}$: Número estimado de peajes entre las ciudades $i$ y $j$\n\n-   $C_p$: Costo promedio de cada peaje (COP), asumido como \\$25.000 COP\n\nEsta aproximación busca representar de forma razonable las condiciones actuales de la red vial colombiana y su impacto económico en los recorridos del viajante.\n\n### Supuestos para el combustible\n\nPara este estudio se seleccionó el ***Chevrolet Spark GT***, un vehículo compacto ampliamente utilizado en Colombia por su eficiencia en carretera y bajo costo operativo. Según especificaciones técnicas reportadas por C3 Care Car Center (2025) y Yahoo Finanzas (2025), este modelo ofrece un **rendimiento promedio de 40 km/galón** en condiciones reales de conducción interurbana, valor asumido para el cálculo de costos en este estudio.\n\nSegún Yahoo Finanzas (2025), el Spark GT combina eficiencia energética (hasta 20.7 km/L en carretera según pruebas homologadas) con una red nacional de soporte técnico, garantizando asistencia en las 13 ciudades contempladas en este estudio. Su diseño compacto facilita la movilidad en zonas urbanas (C3 Care Car Center, 2025), mientras que el rendimiento de 40 km/galón refleja condiciones reales de tráfico y carga (Ministerio de Minas y Energía, 2025).\n\nLos parámetros técnicos relevantes para este automóvil son:\n\n-   *Motor:* 1.2L DOHC de 4 cilindros, 80.5 HP y 108 Nm de torque (C3 Care Car Center, 2025).\n\n-   *Transmisión:* Mecánica, de 5 velocidades, optimizada para topografía colombiana (Yahoo Finanzas, 2025).\n\n-   *Capacidad de carga*: 402 kg, ideal para transporte de muestrarios comerciales (C3 Care Car Center, 2025).\n\n**Asumiendo que el precio de la gasolina es de** \\$16.259 COP por galón (Ministerio de Minas y Energía, 2025), el costo del combustible para desplazarse de la ciudad $i$ a la ciudad $j$ se estima como:\n\n$\\text{Costo del combustible}_{ij} = \\left( \\frac{D_{ij}}{R} \\right) \\cdot C_g  \\tag{4}$\n\ndonde\n\n-   $D_{ij}$: Distancia entre las ciudades $i$ y $j$ (km)\n\n-   $R$: Rendimiento del vehículo (km/galón), asumido como 40 km/galón\n\n-   $C_g$: Costo del galón de gasolina (COP), asumido como \\$16.259 COP por galón\n\n### Matriz de Costos\n\nLa matriz de costos $C$ es una matriz cuadrada de tamaño $n \\times n$, donde $n$ es el número de ciudades, y cada elemento $C_{ij}$, $i, j = 1, \\dots, n$, representa el costo de desplazarse de la ciudad $i$ a la ciudad $j$, y se calcula como:\n\n$C_{ij} = \\text{Costo del salario del viajante}_{ij} + \\text{Costo de los peajes}_{ij} + \\text{Costo del combustible}_{ij}  \\tag{5}$\n\nGeneralmente, los elementos en la diagonal $C_{ii}$ son cero o un valor muy alto para evitar que el vendedor permanezca en la misma ciudad. La matriz puede ser simétrica o asimétrica, dependiendo de si los costos de ida y regreso entre ciudades son iguales o diferentes (Zhang et al., 2024).\n\n## **Algoritmos Genéticos (GA)**\n\nLos algoritmos genéticos (Genetic Algorithms, GA) son métodos de optimización bioinspirados que emulan los principios de la selección natural y la evolución biológica, propuestos inicialmente por John Holland en la década de 1970 (Holland, 1975). Los GA se han aplicado exitosamente a una amplia variedad de problemas complejos, especialmente aquellos donde los métodos exactos son demasiado costosos o inviables. Destacan en problemas combinatorios NP-hard, como el Problema del Viajante de Comercio (TSP), donde el espacio de soluciones crece factorialmente con el número de ciudades, volviendo impracticable la búsqueda exhaustiva (Villalba Fernández de Castro, 2004; Zhang et al., 2020).\n\nLa eficacia de los GA radica en su capacidad para equilibrar la explotación de soluciones prometedoras y la exploración de nuevas regiones del espacio de búsqueda mediante mecanismos estocásticos (Dorigo & Stützle, 2004).\n\nLos componentes clave de un algoritmo genético son:\n\n-   **Representación cromosómica:** Cada solución se codifica como un cromosoma, generalmente un vector que especifica el orden de visita de las ciudades (Zhang et al., 2024).\n\n-   **Función de aptitud (fitness):** Evalúa la calidad de cada solución. Para el TSP, suele calcularse como el inverso o el negativo del costo total de la ruta (Zhang et al., 2020).\n\n-   **Operadores genéticos:**\n\n    -   **Selección:** Prioriza individuos con mayor aptitud, utilizando métodos como la selección por torneo o ruleta (Holland, 1975).\n\n    -   **Cruzamiento (crossover):** Combina segmentos de dos padres para generar descendencia, empleando operadores como el order crossover para preservar permutaciones válidas (Gonçalves et al., 2005).\n\n    -   **Mutación:** Introduce cambios aleatorios, como el intercambio de dos ciudades, para mantener la diversidad genética (Villalba Fernández de Castro, 2004).\n\nEstos algoritmos operan sobre una población de soluciones candidatas (individuos o cromosomas), que evolucionan iterativamente mediante los operadores genéticos mencionados. El objetivo es mejorar progresivamente la aptitud (fitness) de las soluciones a lo largo de las generaciones (Goodfellow et al., 2016).\n\nEn el contexto del TSP, cada individuo representa una ruta que recorre todas las ciudades, y la función objetivo consiste en minimizar el costo total del recorrido. Debido a la naturaleza combinatoria del problema, los algoritmos genéticos ofrecen una estrategia eficiente para encontrar buenas soluciones aproximadas en tiempos razonables, aunque no garantizan hallar siempre la solución óptima. El proceso evolutivo permite que, generación tras generación, la población tienda a encontrar rutas cada vez más eficientes.\n\n**Verificación de la calidad de la solución**\n\nEvaluar la calidad de la solución obtenida es fundamental en el contexto del Problema del Viajante de Comercio (TSP), especialmente cuando se emplean métodos metaheurísticos como los algoritmos genéticos (GA). Los enfoques exactos, como la enumeración exhaustiva de todas las posibles rutas, resultan computacionalmente inviables debido al crecimiento factorial del número de combinaciones a medida que aumenta la cantidad de ciudades (Applegate et al., 2006; Zhang et al., 2020).\n\nAnte esta intratabilidad, se optó por aplicar un algoritmo genético, que permite aproximarse a soluciones de alta calidad mediante múltiples iteraciones y el ajuste de parámetros como el tamaño de la población y el número de generaciones (Mitchell, 1998). Los GA superan a los métodos exactos al reducir la complejidad computacional a $O(g \\cdot n)$, donde $g$ es el número de generaciones y $n$ el tamaño de la población (Applegate et al., 2006).\n\nLa evaluación de la calidad de las soluciones obtenidas mediante GA en el TSP requiere abordar dos desafíos clave: la naturaleza estocástica del algoritmo y la imposibilidad de validar la optimalidad global en instancias grandes. Por ello, se emplean dos pilares fundamentales para la verificación:\n\n-   **Convergencia del fitness:** Se monitorea el historial del costo a través de las generaciones. Una estabilización de la función objetivo en un rango reducido (por ejemplo, variaciones menores al 0.5% en 50 generaciones consecutivas) sugiere proximidad a un óptimo local o global (Gonçalves et al., 2005).\n\n-   **Reproducibilidad:** Ejecuciones independientes con diferentes semillas aleatorias deben generar soluciones de calidad comparable, lo que confirma la robustez del algoritmo (Zhang et al., 2020).\n\n## Algoritmo de Colonia de Hormigas (ACO)\n\nEl algoritmo de colonia de hormigas (*Ant Colony Optimization*, ACO) es una técnica de optimización bioinspirada en el comportamiento colectivo de las colonias de hormigas reales durante la búsqueda de alimento (Dorigo et al., 1996; Dorigo & Stützle, 2004). En la naturaleza, las hormigas encuentran caminos cortos entre su nido y una fuente de alimento depositando una sustancia química llamada feromona. A medida que más hormigas siguen un camino y lo refuerzan con feromonas, ese camino se vuelve más atractivo para otras hormigas, lo que conduce a una optimización distribuida y adaptativa.\n\nBasado en este principio, Marco Dorigo propuso en la década de 1990 el ACO como un algoritmo metaheurístico para resolver problemas combinatorios complejos, tales como el Problema del Viajante de Comercio (TSP), la programación de tareas y la planificación de rutas (Dorigo & Stützle, 2004).\n\nEn el contexto del TSP, cada hormiga construye una solución probabilísticamente, guiada por dos factores principales:\n\n-   La intensidad de feromonas depositadas en los caminos (memoria colectiva).\n-   Una heurística local, generalmente el inverso del costo o la distancia entre ciudades.\n\nCada hormiga construye una solución completa seleccionando las ciudades a visitar con una probabilidad proporcional a estos dos factores. Tras cada iteración, el algoritmo actualiza las feromonas:\n\n-   Evaporando parte de la feromona para evitar la convergencia prematura.\n-   Refuerzando las rutas más exitosas depositando más feromona en los caminos que produjeron soluciones de bajo costo.\n\nEste mecanismo balancea la exploración (búsqueda de nuevas soluciones) y la explotación (refinamiento de soluciones prometedoras), permitiendo que el algoritmo encuentre soluciones cercanas al óptimo en problemas donde los métodos exactos son computacionalmente inviables (Dorigo et al., 1996; Dorigo & Stützle, 2004).\n\nEn este estudio, el ACO fue utilizado para resolver la instancia del TSP correspondiente a las 13 ciudades principales de Colombia, minimizando el costo total del trayecto, que incluye tiempo de desplazamiento, peajes y combustible. Mediante la configuración de parámetros clave como el número de hormigas, la importancia relativa de la heurística y la tasa de evaporación, el algoritmo logró encontrar soluciones estables y de bajo costo, comparables con las obtenidas mediante algoritmos genéticos.\n\n# Resultados y Análisis\n\nEl proceso seguido para resolver el Problema del Viajante de Comercio (TSP) con algoritmos genéticos (GA) y colonia de hormigas (ACO) fue el siguiente:\n\n1.  **Construcción de la matriz de costos:** Se recopilaron datos de distancia y tiempo entre las 13 ciudades principales de Colombia, utilizando fuentes confiables como el portal [Mejores Rutas](https://colombia.mejoresrutas.com/tabla-de-distancias/co/) (Mejores rutas Colombia, s.f.) y el portal [Geodatos](https://www.geodatos.net/distancias/ciudades/colombia) (Geodatos.net, s.f.). A partir de estos datos y los parámetros definidos (salario, rendimiento del vehículo, precio del combustible y peajes), se calculó el costo total para cada trayecto entre ciudades.\n\n2.  **Implementación de los algoritmos:**\n\n    **Algoritmo genético:** Se utilizó la librería **`GA`** en R para modelar el problema como una permutación de ciudades. La función de aptitud fue definida como el negativo del costo total, para así minimizar el recorrido. Se experimentó con diferentes tamaños de población y número de generaciones para observar el comportamiento del algoritmo.\n\n    **Algoritmo de colonia de hormigas**: Se desarrolló un modelo ACO adaptado al TSP, donde cada hormiga construye una ruta completa a través de todas las ciudades. Los parámetros clave incluyeron el número de hormigas, la importancia relativa de la feromona (α) y la heurística (β), y la tasa de evaporación de feromona (ρ).\n\n3.  **Visualización de resultados:** Se graficó la evolución del costo total a lo largo de las generaciones (GA) o de las iteraciones (ACO), y se representó la mejor ruta encontrada sobre el mapa de Colombia, utilizando la librería **`leaflet`** para mostrar el recorrido óptimo.\n\n4.  **Verificación de la calidad de la solución:** Se analizaron los patrones de ambos algoritmos, observando como evolucionaba el costo total, en cuántas iteracciones se estabilizaba y si alcanzaba una solución robusta. La solución final se seleccionó como la ruta de menor costo histórico registrado durante la ejecución, considerando la estabilización de la función objetivo y la ausencia de mejoras sustanciales en las iteraciones finales.\n\n## Construcción de la Matriz de Costos\n\nPara este estudio, se utilizó el portal [Mejores Rutas](https://colombia.mejoresrutas.com/tabla-de-distancias/co/) (Mejores rutas Colombia, s.f.) para generar la matriz de distancia correspondiente a las 13 ciudades principales de Colombia. Estas ciudades son: Bogotá, Cali, Medellín, Barranquilla, Cartagena, Cúcuta, Bucaramanga, Pereira, Santa Marta, Ibagué, Pasto, Manizales y Neiva.\n\nAdemás, la plataforma ofrecía una estimación del tiempo de viaje entre ciudades, calculado con base en un tiempo promedio de desplazamiento de aproximadamente 73 km/h. La selección de estas ciudades se basó en el criterio de su población.\n\nPara complementar este análisis, se utilizó la plataforma [Simple Maps](https://simplemaps.com/data/co-cities) para obtener las coordenadas centrales de cada ciudad, facilitando su localización en el mapa y la visualización de la información geográfica.\n\nLa **Tabla 1** muestra la matriz de costos entre ciudades $C$ calculada para el análisis.\n\n**Tabla1.** *Matriz de costo entre ciudades.*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Librerías necesarias\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(tidyverse)\nlibrary(GA)  # Librería genética optimizada\nlibrary(ggplot2)\nlibrary(readxl)\nlibrary(leaflet)\nlibrary(dplyr)\n\n# Lectura de datos\nCiudades <- read.csv(\"data/Distancias.csv\", row.names=1, na.strings=\"0\")[1:13, 1:13] \n\nTiempo_Recorrido <- read.csv(\"data/Tiempos.csv\", row.names=1, na.strings=\"0\")[1:13, 1:13] \n\nCiudadesUbicacion <- readxl::read_excel(\"data/CiudadesUbicacion.xlsx\")\n\n# Convertimos los datos que están en formato texto (h:mm) a horas decimales\nconvertir_horas <- function(x) {   \n  if (is.na(x)) return(NA)   \n  partes <- strsplit(x, \":\")[[1]]\n  horas <- as.numeric(partes[1])\n  minutos <- as.numeric(partes[2])\n  return(horas + minutos/60)\n}\n\nTiempo_Recorrido <- apply(Tiempo_Recorrido, c(1,2), convertir_horas)\n\nCiudades <- apply(Ciudades, c(1,2), as.numeric)\n\n\n## Cálculo de la Matriz de Costos\n\n# Parámetros de costos\nvalor_hora <- 25000\nrendimiento_carro <- 40\nprecio_galon <- 16259\n\n# Costo de combustible entre cada par de ciudades\ncosto_combustible <- (Ciudades / rendimiento_carro) * precio_galon\n\n# Número estimado de peajes entre cada par de ciudades\ncosto_peajes <- round(Ciudades / 60) * 25000\n\n# Costo del vendedor\ncosto_vendedor <- (valor_hora * Tiempo_Recorrido)\nCostoTotal <- costo_vendedor + costo_peajes + costo_combustible\n\n# Mostrando la matriz de costos\nknitr::kable(CostoTotal) %>%\n  kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"), full_width = F)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-hover table-condensed table-responsive\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">  </th>\n   <th style=\"text-align:right;\"> Bogotá </th>\n   <th style=\"text-align:right;\"> Cali </th>\n   <th style=\"text-align:right;\"> Medellín </th>\n   <th style=\"text-align:right;\"> Barranquilla </th>\n   <th style=\"text-align:right;\"> Cartagena </th>\n   <th style=\"text-align:right;\"> Cúcuta </th>\n   <th style=\"text-align:right;\"> Bucaramanga </th>\n   <th style=\"text-align:right;\"> Pereira </th>\n   <th style=\"text-align:right;\"> Santa.Marta </th>\n   <th style=\"text-align:right;\"> Ibagué </th>\n   <th style=\"text-align:right;\"> Pasto </th>\n   <th style=\"text-align:right;\"> Manizales </th>\n   <th style=\"text-align:right;\"> Neiva </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Bogotá </td>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> 403314.8 </td>\n   <td style=\"text-align:right;\"> 349840.0 </td>\n   <td style=\"text-align:right;\"> 806526.49 </td>\n   <td style=\"text-align:right;\"> 880001.3 </td>\n   <td style=\"text-align:right;\"> 483708.7 </td>\n   <td style=\"text-align:right;\"> 330328.0 </td>\n   <td style=\"text-align:right;\"> 273795.00 </td>\n   <td style=\"text-align:right;\"> 782197.95 </td>\n   <td style=\"text-align:right;\"> 165027.0 </td>\n   <td style=\"text-align:right;\"> 668909.0 </td>\n   <td style=\"text-align:right;\"> 262575.58 </td>\n   <td style=\"text-align:right;\"> 246427.5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Cali </td>\n   <td style=\"text-align:right;\"> 402908.3 </td>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> 379290.8 </td>\n   <td style=\"text-align:right;\"> 948587.06 </td>\n   <td style=\"text-align:right;\"> 899715.9 </td>\n   <td style=\"text-align:right;\"> 809179.4 </td>\n   <td style=\"text-align:right;\"> 652120.0 </td>\n   <td style=\"text-align:right;\"> 170717.65 </td>\n   <td style=\"text-align:right;\"> 1013870.04 </td>\n   <td style=\"text-align:right;\"> 241600.8 </td>\n   <td style=\"text-align:right;\"> 376679.9 </td>\n   <td style=\"text-align:right;\"> 226214.66 </td>\n   <td style=\"text-align:right;\"> 356751.2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Medellín </td>\n   <td style=\"text-align:right;\"> 348600.2 </td>\n   <td style=\"text-align:right;\"> 379717.7 </td>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> 570119.38 </td>\n   <td style=\"text-align:right;\"> 546248.3 </td>\n   <td style=\"text-align:right;\"> 496666.1 </td>\n   <td style=\"text-align:right;\"> 340013.2 </td>\n   <td style=\"text-align:right;\"> 185250.02 </td>\n   <td style=\"text-align:right;\"> 644965.32 </td>\n   <td style=\"text-align:right;\"> 323967.1 </td>\n   <td style=\"text-align:right;\"> 721916.2 </td>\n   <td style=\"text-align:right;\"> 176591.75 </td>\n   <td style=\"text-align:right;\"> 495009.7 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Barranquilla </td>\n   <td style=\"text-align:right;\"> 804880.2 </td>\n   <td style=\"text-align:right;\"> 944034.3 </td>\n   <td style=\"text-align:right;\"> 565556.4 </td>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> 102975.4 </td>\n   <td style=\"text-align:right;\"> 565343.6 </td>\n   <td style=\"text-align:right;\"> 535100.2 </td>\n   <td style=\"text-align:right;\"> 774983.32 </td>\n   <td style=\"text-align:right;\"> 81857.93 </td>\n   <td style=\"text-align:right;\"> 797471.9 </td>\n   <td style=\"text-align:right;\"> 1312055.9 </td>\n   <td style=\"text-align:right;\"> 741325.04 </td>\n   <td style=\"text-align:right;\"> 951289.7 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Cartagena </td>\n   <td style=\"text-align:right;\"> 890254.9 </td>\n   <td style=\"text-align:right;\"> 898079.9 </td>\n   <td style=\"text-align:right;\"> 545008.5 </td>\n   <td style=\"text-align:right;\"> 102131.91 </td>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> 649895.2 </td>\n   <td style=\"text-align:right;\"> 595068.4 </td>\n   <td style=\"text-align:right;\"> 729018.68 </td>\n   <td style=\"text-align:right;\"> 183573.17 </td>\n   <td style=\"text-align:right;\"> 867735.7 </td>\n   <td style=\"text-align:right;\"> 1265684.8 </td>\n   <td style=\"text-align:right;\"> 720360.41 </td>\n   <td style=\"text-align:right;\"> 1036257.9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Cúcuta </td>\n   <td style=\"text-align:right;\"> 481229.1 </td>\n   <td style=\"text-align:right;\"> 808783.1 </td>\n   <td style=\"text-align:right;\"> 492093.0 </td>\n   <td style=\"text-align:right;\"> 565343.60 </td>\n   <td style=\"text-align:right;\"> 646561.8 </td>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> 157486.2 </td>\n   <td style=\"text-align:right;\"> 639721.91 </td>\n   <td style=\"text-align:right;\"> 515608.58 </td>\n   <td style=\"text-align:right;\"> 568452.7 </td>\n   <td style=\"text-align:right;\"> 1144762.1 </td>\n   <td style=\"text-align:right;\"> 584621.18 </td>\n   <td style=\"text-align:right;\"> 722687.2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Bucaramanga </td>\n   <td style=\"text-align:right;\"> 328254.8 </td>\n   <td style=\"text-align:right;\"> 652953.3 </td>\n   <td style=\"text-align:right;\"> 336273.4 </td>\n   <td style=\"text-align:right;\"> 535516.86 </td>\n   <td style=\"text-align:right;\"> 592558.2 </td>\n   <td style=\"text-align:right;\"> 158309.4 </td>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> 483485.67 </td>\n   <td style=\"text-align:right;\"> 486188.32 </td>\n   <td style=\"text-align:right;\"> 412633.2 </td>\n   <td style=\"text-align:right;\"> 988932.4 </td>\n   <td style=\"text-align:right;\"> 428384.95 </td>\n   <td style=\"text-align:right;\"> 566450.9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Pereira </td>\n   <td style=\"text-align:right;\"> 274628.3 </td>\n   <td style=\"text-align:right;\"> 171134.3 </td>\n   <td style=\"text-align:right;\"> 186063.0 </td>\n   <td style=\"text-align:right;\"> 780775.88 </td>\n   <td style=\"text-align:right;\"> 731488.1 </td>\n   <td style=\"text-align:right;\"> 641368.2 </td>\n   <td style=\"text-align:right;\"> 484308.8 </td>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> 845642.20 </td>\n   <td style=\"text-align:right;\"> 113320.8 </td>\n   <td style=\"text-align:right;\"> 538739.3 </td>\n   <td style=\"text-align:right;\"> 57997.01 </td>\n   <td style=\"text-align:right;\"> 277869.9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Santa Marta </td>\n   <td style=\"text-align:right;\"> 780551.7 </td>\n   <td style=\"text-align:right;\"> 1013463.6 </td>\n   <td style=\"text-align:right;\"> 640808.8 </td>\n   <td style=\"text-align:right;\"> 81441.26 </td>\n   <td style=\"text-align:right;\"> 184000.0 </td>\n   <td style=\"text-align:right;\"> 540598.4 </td>\n   <td style=\"text-align:right;\"> 485771.7 </td>\n   <td style=\"text-align:right;\"> 818995.92 </td>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> 772726.7 </td>\n   <td style=\"text-align:right;\"> 1349036.1 </td>\n   <td style=\"text-align:right;\"> 788895.19 </td>\n   <td style=\"text-align:right;\"> 926961.2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Ibagué </td>\n   <td style=\"text-align:right;\"> 165037.2 </td>\n   <td style=\"text-align:right;\"> 242423.9 </td>\n   <td style=\"text-align:right;\"> 323956.9 </td>\n   <td style=\"text-align:right;\"> 797878.41 </td>\n   <td style=\"text-align:right;\"> 870946.8 </td>\n   <td style=\"text-align:right;\"> 568452.7 </td>\n   <td style=\"text-align:right;\"> 411799.8 </td>\n   <td style=\"text-align:right;\"> 112904.09 </td>\n   <td style=\"text-align:right;\"> 773143.39 </td>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> 590343.6 </td>\n   <td style=\"text-align:right;\"> 170880.72 </td>\n   <td style=\"text-align:right;\"> 167862.1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Pasto </td>\n   <td style=\"text-align:right;\"> 668502.5 </td>\n   <td style=\"text-align:right;\"> 375856.8 </td>\n   <td style=\"text-align:right;\"> 721906.0 </td>\n   <td style=\"text-align:right;\"> 1316202.21 </td>\n   <td style=\"text-align:right;\"> 1267331.1 </td>\n   <td style=\"text-align:right;\"> 1144345.5 </td>\n   <td style=\"text-align:right;\"> 987692.6 </td>\n   <td style=\"text-align:right;\"> 537916.13 </td>\n   <td style=\"text-align:right;\"> 1348619.48 </td>\n   <td style=\"text-align:right;\"> 590343.6 </td>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> 593423.33 </td>\n   <td style=\"text-align:right;\"> 421648.1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Manizales </td>\n   <td style=\"text-align:right;\"> 261346.0 </td>\n   <td style=\"text-align:right;\"> 226641.5 </td>\n   <td style=\"text-align:right;\"> 176591.8 </td>\n   <td style=\"text-align:right;\"> 745887.99 </td>\n   <td style=\"text-align:right;\"> 722423.4 </td>\n   <td style=\"text-align:right;\"> 585037.8 </td>\n   <td style=\"text-align:right;\"> 428385.0 </td>\n   <td style=\"text-align:right;\"> 57173.87 </td>\n   <td style=\"text-align:right;\"> 789311.86 </td>\n   <td style=\"text-align:right;\"> 170474.2 </td>\n   <td style=\"text-align:right;\"> 593840.0 </td>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> 335023.4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Neiva </td>\n   <td style=\"text-align:right;\"> 247687.7 </td>\n   <td style=\"text-align:right;\"> 356751.2 </td>\n   <td style=\"text-align:right;\"> 489756.1 </td>\n   <td style=\"text-align:right;\"> 952539.70 </td>\n   <td style=\"text-align:right;\"> 1026014.5 </td>\n   <td style=\"text-align:right;\"> 723520.5 </td>\n   <td style=\"text-align:right;\"> 566867.6 </td>\n   <td style=\"text-align:right;\"> 278703.28 </td>\n   <td style=\"text-align:right;\"> 928211.16 </td>\n   <td style=\"text-align:right;\"> 169935.3 </td>\n   <td style=\"text-align:right;\"> 423721.3 </td>\n   <td style=\"text-align:right;\"> 336679.90 </td>\n   <td style=\"text-align:right;\"> NA </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n## GA aplicado al TSP\n\n### **Implementación del GA aplicado al TSP**\n\nSe utilizó la librería `GA` en R para modelar el problema TSP como una permutación de ciudades. La función de aptitud fue definida como el negativo del costo total, para así minimizar el recorrido.\n\nPara la simulación del GA se utilizaron los siguientes *Hiperparámetros críticos* (basado en implementaciones prácticas):\n\n-   Tamaño de población: 50 individuos, balanceando diversidad y costo computacional (Revistas Uniboyacá, s.f.).\n\n-   Generaciones: 500 iteraciones, suficientes para converger hacia soluciones cercanas al óptimo (Gonçalves et al., 2005).\n\n-   Tasa de mutación: 20%, equilibrando exploración y estabilidad (Revistas Uniboyacá, s.f.).\n\n***La mejor solución encontrada por GA presentó un costo total mínimo de \\$3.369.197, lograda en la generación 253.***\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\n\n# Función para calcular el costo total de una ruta\nevaluar_ruta <- function(ruta, matriz_costos) {\n  costo <- 0\n  for (i in 1:(length(ruta) - 1)) {\n    costo <- costo + matriz_costos[ruta[i], ruta[i + 1]]\n  }\n  # Cerrar el ciclo regresando a la ciudad inicial\n  costo <- costo + CostoTotal[ruta[length(ruta)], ruta[1]]\n  return(costo)\n}\n\n# Número de ciudades\nn_ciudades <- nrow(CostoTotal)\n\n# Implementar el algoritmo\n# modelo_GA <- ga(\n#   type = \"permutation\",\n#   fitness = function(ruta) -evaluar_ruta(ruta, CostoTotal),  # Negativo para minimizar\n#   lower = 1,\n#   upper = n_ciudades,\n#   popSize = 50,            # Tamaño de la población\n#   maxiter = 500,           # Número máximo de generaciones\n#   pmutation = 0.2,        # Probabilidad de mutación\n#   monitor = FALSE\n# )\nhistorial_fitness <- c()\nmodelo_GA <- ga(\n  type = \"permutation\",\n  fitness = function(ruta) -evaluar_ruta(ruta, CostoTotal),  # Negativo para minimizar\n  lower = 1,\n  upper = n_ciudades,\n  popSize = 50,            # Tamaño de la población\n  maxiter = 500,           # Número máximo de generaciones\n  pmutation = 0.2,        # Probabilidad de mutación\n  monitor = function(obj) {\n    historial_fitness <<- c(historial_fitness, -max(obj@fitness))\n  }\n)\n\n# Mejor ruta\nmejor_ruta <- modelo_GA@solution[1,]\n\n# Mejor costo\nmejor_costo <- -modelo_GA@fitnessValue  # Recuerda que lo negamos antes\n\n# Mostrar resultados\n\n# Crear dataframe del historial\ndf_historial <- data.frame(\n  Generacion = 1:length(historial_fitness),\n  CostoTotal = historial_fitness\n)\n\n# Encontrar el mejor costo\n#mejor_costo <- min(df_historial$CostoTotal)\nmejor_generacion <- df_historial$Generacion[which.min(df_historial$CostoTotal)]\n\n# Mostrar resultados\ncat(\"\\nLa mejor ruta se obtuvo en la generación \", mejor_generacion, \"\\nEl costo total de la mejor ruta fue de $\", format(mejor_costo, big.mark=\",\"), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nLa mejor ruta se obtuvo en la generación  253 \nEl costo total de la mejor ruta fue de $ 3,369,197 \n```\n\n\n:::\n:::\n\n\n\n### **Visualización de resultados del GA aplicado al TSP**\n\n#### **Evolución del costo total a través de las generaciones**\n\nLa **Figura 1** muestra cómo evolucionó el Costo Total a través de 500 generaciones. Se observa en ella que el algoritmo genético mostró una mejora significativa en el costo total durante las primeras generaciones, encontrando soluciones de menor costo de forma rápida. A partir de la generación 250 aproximadamente, el algoritmo estabilizó su desempeño, indicando que había alcanzado una solución cercana al óptimo.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Graficar la evolucion del Costo en el AG\n\n# Crear el texto que quieres mostrar\ntexto_anotacion <- paste0(\"Generación: \", mejor_generacion, \"\\nCosto: \", format(round(mejor_costo, 0), big.mark = \",\"))\n\n# Graficar\nggplot(df_historial, aes(x = Generacion, y = CostoTotal)) +\n  geom_line(color = \"darkgreen\", size = 1) +\n  geom_point(color = \"forestgreen\", size = 1.5) +\n  annotate(\"point\", \n           x = mejor_generacion, \n           y = mejor_costo, \n           color = \"red\", \n           size = 4) +\n  annotate(\"text\",\n           x = mejor_generacion + 20,  # desplazamos un poco para que no tape el punto\n           y = mejor_costo,\n           label = texto_anotacion,\n           hjust = 0,                  # alineación horizontal\n           vjust = -0.5,               # alineación vertical\n           size = 4,\n           color = \"black\",\n           fontface = \"bold\") +\n  theme_minimal() +\n  labs(\n    title = \"Evolución del Costo Total en el Algoritmo Genético (AG)\",\n    x = \"Generación\",\n    y = \"Costo Total\"\n  ) +\n  theme(\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 14),\n    axis.title = element_text(face = \"bold\", size = 12),\n    axis.text = element_text(size = 10)\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/evolucionCostoGA-1.png){width=768}\n:::\n:::\n\n\n\n**Figura 1.** *Evolución del Costo Total en el GA a través de 500 generaciones.*\n\n#### **Visualización de la mejor ruta**\n\nLa **Tabla 2** muestra la mejor ruta hallada por GA, que corresponde al *costo total mínimo de \\$3.369.197,* entre las 13 ciudades de Colombia en el orden que deben recorrerse.\n\n**Tabla 2.** *Orden en que deben recorrerse las 13 ciudades en la mejor ruta obtenida por GA.*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Mejor ruta (ya teníamos mejor_ruta)\nruta_completa <- c(mejor_ruta, mejor_ruta[1])\n\n# Extraer ciudades en orden de la ruta\nruta_ciudades <- CiudadesUbicacion[ruta_completa, ]\n\n# Agregar el orden de visita\nruta_ciudades$Orden <- 1:nrow(ruta_ciudades)\n\n# Mostrando la mejor ruta\nknitr::kable(\n  ruta_ciudades[, c(\"Ciudad\", \"Orden\")],\n  col.names = c(\"Ciudad\", \"Orden de visita\")\n) %>%\n  kable_styling(\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"),\n    full_width = FALSE,\n    position = \"center\"\n  ) %>%\n  column_spec(1, bold = TRUE, width = \"10em\") %>%\n  column_spec(2, width = \"5em\") %>%\n  row_spec(0, bold = TRUE, color = \"white\", background = \"#4682B4\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-hover table-condensed table-responsive\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;font-weight: bold;color: white !important;background-color: rgba(70, 130, 180, 255) !important;\"> Ciudad </th>\n   <th style=\"text-align:right;font-weight: bold;color: white !important;background-color: rgba(70, 130, 180, 255) !important;\"> Orden de visita </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;width: 10em; font-weight: bold;\"> Santa Marta </td>\n   <td style=\"text-align:right;width: 5em; \"> 1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10em; font-weight: bold;\"> Barranquilla </td>\n   <td style=\"text-align:right;width: 5em; \"> 2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10em; font-weight: bold;\"> Cartagena </td>\n   <td style=\"text-align:right;width: 5em; \"> 3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10em; font-weight: bold;\"> Medellín </td>\n   <td style=\"text-align:right;width: 5em; \"> 4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10em; font-weight: bold;\"> Manizales </td>\n   <td style=\"text-align:right;width: 5em; \"> 5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10em; font-weight: bold;\"> Pereira </td>\n   <td style=\"text-align:right;width: 5em; \"> 6 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10em; font-weight: bold;\"> Ibagué </td>\n   <td style=\"text-align:right;width: 5em; \"> 7 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10em; font-weight: bold;\"> Cali </td>\n   <td style=\"text-align:right;width: 5em; \"> 8 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10em; font-weight: bold;\"> Pasto </td>\n   <td style=\"text-align:right;width: 5em; \"> 9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10em; font-weight: bold;\"> Neiva </td>\n   <td style=\"text-align:right;width: 5em; \"> 10 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10em; font-weight: bold;\"> Bogotá </td>\n   <td style=\"text-align:right;width: 5em; \"> 11 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10em; font-weight: bold;\"> Bucaramanga </td>\n   <td style=\"text-align:right;width: 5em; \"> 12 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10em; font-weight: bold;\"> Cúcuta </td>\n   <td style=\"text-align:right;width: 5em; \"> 13 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10em; font-weight: bold;\"> Santa Marta </td>\n   <td style=\"text-align:right;width: 5em; \"> 14 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\nLa **Figura 2** muestra la superposición de la mejor ruta hallada por GA en el mapa de Colombia.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Crear texto de costo\ncosto_texto <- paste0(\"Costo total mínimo: $\", format(round(mejor_costo, 0), big.mark = \",\"))\n# Íconos personalizados para inicio y fin\nicono_inicio <- awesomeIcons(\n  icon = 'flag',\n  iconColor = 'white',\n  markerColor = 'green',\n  library = 'fa'\n)\n\nicono_fin <- awesomeIcons(\n  icon = 'flag',\n  iconColor = 'white',\n  markerColor = 'red',\n  library = 'fa'\n)\n\n# Texto del costo total\ncosto_texto <- paste0(\"Costo total mínimo: $\", format(round(mejor_costo, 0), big.mark = \",\"))\n\n# Crear el mapa\nleaflet() %>%\n  addProviderTiles(providers$CartoDB.Positron) %>%\n  \n  # Marcar la ciudad de inicio (primer ciudad de la ruta)\n  addAwesomeMarkers(\n    lng = ruta_ciudades$Longitud[1],\n    lat = ruta_ciudades$Latitud[1],\n    icon = icono_inicio,\n    popup = paste(\"Inicio:\", ruta_ciudades$Ciudad[1])\n  ) %>%\n  \n  # Marcar la ciudad final (última ciudad de la ruta)\n  addAwesomeMarkers(\n    lng = ruta_ciudades$Longitud[nrow(ruta_ciudades)-1],\n    lat = ruta_ciudades$Latitud[nrow(ruta_ciudades)-1],\n    icon = icono_fin,\n    popup = paste(\"Fin:\", ruta_ciudades$Ciudad[nrow(ruta_ciudades)-1])\n  ) %>%\n  \n  # Marcar todas las demás ciudades normales\n  addCircleMarkers(\n    data = ruta_ciudades,\n    lng = ~Longitud,\n    lat = ~Latitud,\n    radius = 6,\n    color = \"blue\",\n    fillColor = \"blue\",\n    fillOpacity = 0.8,\n    label = ~paste0(Orden, \". \", Ciudad),\n    popup = ~paste(\"Ciudad:\", Ciudad, \"<br>\", \"Orden de visita:\", Orden)\n  ) %>%\n  \n  # Agregar la ruta conectando las ciudades\n  addPolylines(\n    lng = ~Longitud,\n    lat = ~Latitud,\n    data = ruta_ciudades,\n    color = \"red\",\n    weight = 3,\n    opacity = 0.8\n  ) %>%\n  \n  # Mostrar el costo total en una esquina\n  addControl(\n    html = paste0(\"<b>\", costo_texto, \"</b>\"),\n    position = \"bottomleft\"\n  )\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"leaflet html-widget html-fill-item\" id=\"htmlwidget-f153291709f234e3eee7\" style=\"width:100%;height:487px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-f153291709f234e3eee7\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addProviderTiles\",\"args\":[\"CartoDB.Positron\",null,null,{\"errorTileUrl\":\"\",\"noWrap\":false,\"detectRetina\":false}]},{\"method\":\"addAwesomeMarkers\",\"args\":[11.2419,-74.20529999999999,{\"icon\":\"flag\",\"markerColor\":\"green\",\"iconColor\":\"white\",\"spin\":false,\"squareMarker\":false,\"iconRotate\":0,\"font\":\"monospace\",\"prefix\":\"fa\"},null,null,{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},\"Inicio: Santa Marta\",null,null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addAwesomeMarkers\",\"args\":[7.8942,-72.5039,{\"icon\":\"flag\",\"markerColor\":\"red\",\"iconColor\":\"white\",\"spin\":false,\"squareMarker\":false,\"iconRotate\":0,\"font\":\"monospace\",\"prefix\":\"fa\"},null,null,{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},\"Fin: Cúcuta\",null,null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addCircleMarkers\",\"args\":[[11.2419,10.9833,10.4,6.2308,5.1,4.8143,4.4333,3.4206,1.2078,2.9345,4.7111,7.1333,7.8942,11.2419],[-74.20529999999999,-74.8019,-75.5,-75.59059999999999,-75.55,-75.69459999999999,-75.2333,-76.5222,-77.27719999999999,-75.2809,-74.0722,-73,-72.5039,-74.20529999999999],6,null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"blue\",\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"blue\",\"fillOpacity\":0.8},null,null,[\"Ciudad: Santa Marta <br> Orden de visita: 1\",\"Ciudad: Barranquilla <br> Orden de visita: 2\",\"Ciudad: Cartagena <br> Orden de visita: 3\",\"Ciudad: Medellín <br> Orden de visita: 4\",\"Ciudad: Manizales <br> Orden de visita: 5\",\"Ciudad: Pereira <br> Orden de visita: 6\",\"Ciudad: Ibagué <br> Orden de visita: 7\",\"Ciudad: Cali <br> Orden de visita: 8\",\"Ciudad: Pasto <br> Orden de visita: 9\",\"Ciudad: Neiva <br> Orden de visita: 10\",\"Ciudad: Bogotá <br> Orden de visita: 11\",\"Ciudad: Bucaramanga <br> Orden de visita: 12\",\"Ciudad: Cúcuta <br> Orden de visita: 13\",\"Ciudad: Santa Marta <br> Orden de visita: 14\"],null,[\"1. Santa Marta\",\"2. Barranquilla\",\"3. Cartagena\",\"4. Medellín\",\"5. Manizales\",\"6. Pereira\",\"7. Ibagué\",\"8. Cali\",\"9. Pasto\",\"10. Neiva\",\"11. Bogotá\",\"12. Bucaramanga\",\"13. Cúcuta\",\"14. Santa Marta\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addPolylines\",\"args\":[[[[{\"lng\":[-74.20529999999999,-74.8019,-75.5,-75.59059999999999,-75.55,-75.69459999999999,-75.2333,-76.5222,-77.27719999999999,-75.2809,-74.0722,-73,-72.5039,-74.20529999999999],\"lat\":[11.2419,10.9833,10.4,6.2308,5.1,4.8143,4.4333,3.4206,1.2078,2.9345,4.7111,7.1333,7.8942,11.2419]}]]],null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"red\",\"weight\":3,\"opacity\":0.8,\"fill\":false,\"fillColor\":\"red\",\"fillOpacity\":0.2,\"smoothFactor\":1,\"noClip\":false},null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addControl\",\"args\":[\"<b>Costo total mínimo: $3,369,197<\\/b>\",\"bottomleft\",null,\"info legend\"]}],\"limits\":{\"lat\":[1.2078,11.2419],\"lng\":[-77.27719999999999,-72.5039]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n**Figura 2.** Superposición de la mejor ruta obtenida por GA en el mapa de Colombia.\n\n### Recorrido óptimo animado mejor ruta GA\n\nLa **Figura 3** muestra una animación del recorrido a través de la mejor ruta encontrada usando GA aplicado al TSG.\n\n![](GifGA.gif){fig-align=\"center\"}\n\n**Figura 3.** *Animación del recorrido óptima encontrada usando GA aplicado al TSG*.\n\n### Verificación de la calidad de la solución del GA aplicado al TSP\n\nDurante la ejecución del algoritmo, se observó un comportamiento típico de convergencia: inicialmente, el costo total disminuyó rápidamente, mostrando mejoras significativas en las primeras generaciones; posteriormente, el costo se estabilizó, oscilando alrededor de una media relativamente constante. Este patrón es consistente con el comportamiento esperado en métodos de optimización metaheurística, indicando que el AG convergió hacia un conjunto de soluciones cercanas al óptimo.\n\nPor lo tanto, se seleccionó como solución final la ruta correspondiente al menor costo alcanzado durante las iteraciones. Dado que las funciones de costo tienden a estabilizarse en un rango limitado y que no se observaron mejoras sustanciales tras cierto número de generaciones, se concluye que la solución obtenida es razonablemente buena, considerando las limitaciones inherentes a los métodos no determinísticos y la complejidad del problema (Gonçalves et al., 2005; Zhang et al., 2020).\n\n## ACO aplicado al TSP\n\n### **Implementación del ACO aplicado al TSP**\n\nPara la simulación del ACO se utilizaron los siguientes hiperparámetros críticos, basados en recomendaciones de la literatura y experimentación práctica:\n\n-   **Número de hormigas:** 13, buscando un equilibrio entre la diversidad de soluciones exploradas y el costo computacional (Dorigo & Stützle, 2004).\n\n-   **Iteraciones:** 500, suficientes para permitir la convergencia hacia soluciones de bajo costo (Gambardella & Dorigo, 1995).\n\n-   **Importancia relativa de la feromona (**$\\alpha$**):** 1, para que la información histórica de las rutas influya en la toma de decisiones.\n\n-   **Importancia de la heurística (**$\\beta$**):** 5, dando mayor peso al costo inmediato de los trayectos (Dorigo & Stützle, 2004).\n\n-   **Tasa de evaporación de feromona (**$\\rho$**):** 0.5, permitiendo un balance entre la explotación de buenas rutas y la exploración de nuevas alternativas.\n\n-   **Constante para el depósito de feromona (\\$Q\\$):** 1.\n\n***La mejor solución encontrada por ACO presentó un costo total mínimo de \\$3,271,872, lograda en la iteración 96.***\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Número de ciudades\nn_ciudades <- nrow(CostoTotal)\n\n# Parámetros del ACO\nn_hormigas <- n_ciudades       # Una hormiga por ciudad\nn_iteraciones <- 500           # Número de generaciones\nalpha <- 1                     # Importancia de la feromona\nbeta <- 5                      # Importancia de la visibilidad (1/distancia)\nrho <- 0.5                     # Tasa de evaporación\nQ <- 1                         # Constante para el depósito de feromona\n\n# Inicializar feromonas (matriz llena de 1's)\nferomonas <- matrix(1, n_ciudades, n_ciudades)\n\n# Visibilidad: inversa del costo (matriz de distancias)\nvisibilidad <- 1 / CostoTotal\ndiag(visibilidad) <- 0   # No queremos loops sobre sí mismo\n\nconstruir_ruta <- function(feromonas, visibilidad, alpha, beta) {\n  ruta <- integer(n_ciudades)\n  ruta[1] <- sample(1:n_ciudades, 1)   # Escoge ciudad inicial aleatoria\n  \n  no_visitadas <- setdiff(1:n_ciudades, ruta[1])\n  \n  for (i in 2:n_ciudades) {\n    ultimo <- ruta[i-1]\n    \n    if (length(no_visitadas) == 1) {\n      siguiente <- no_visitadas  # Solo queda una opción\n    } else {\n      probabilidades <- (feromonas[ultimo, no_visitadas]^alpha) * (visibilidad[ultimo, no_visitadas]^beta)\n      probabilidades <- probabilidades / sum(probabilidades)\n      \n      siguiente <- sample(no_visitadas, 1, prob = probabilidades)\n    }\n    \n    ruta[i] <- siguiente\n    no_visitadas <- setdiff(no_visitadas, siguiente)\n  }\n  \n  return(ruta)\n}\n\n\n# Función para calcular el costo de una ruta\ncosto_ruta <- function(ruta, costo_total) {\n  costo <- 0\n  for (i in 1:(length(ruta)-1)) {\n    costo <- costo + costo_total[ruta[i], ruta[i+1]]\n  }\n  # Cerrar el ciclo (regresar al origen)\n  costo <- costo + costo_total[ruta[length(ruta)], ruta[1]]\n  return(costo)\n}\n\n# Guardar el mejor resultado\nmejor_ruta_aco <- NULL\nmejor_costo_aco <- Inf\nhistorial_costo_aco <- c()\nmejor_iteracion_aco <- 0\n\n\nfor (iter in 1:n_iteraciones) {\n  \n  rutas <- list()\n  costos <- numeric(n_hormigas)\n  \n  # Cada hormiga construye su ruta\n  for (k in 1:n_hormigas) {\n    rutas[[k]] <- construir_ruta(feromonas, visibilidad, alpha, beta)\n    costos[k] <- costo_ruta(rutas[[k]], CostoTotal)\n  }\n  \n  # Actualizar mejor solución\n  if (min(costos) < mejor_costo_aco) {\n    mejor_costo_aco <- min(costos)\n    mejor_ruta_aco <- rutas[[which.min(costos)]]\n    mejor_iteracion_aco <- iter \n  }\n  \n  # Actualizar feromonas\n  feromonas <- (1 - rho) * feromonas   # Evaporación\n  \n  for (k in 1:n_hormigas) {\n    ruta_k <- rutas[[k]]\n    costo_k <- costos[k]\n    \n    for (i in 1:(length(ruta_k)-1)) {\n      feromonas[ruta_k[i], ruta_k[i+1]] <- feromonas[ruta_k[i], ruta_k[i+1]] + Q / costo_k\n    }\n    # Cerrar el ciclo\n    feromonas[ruta_k[length(ruta_k)], ruta_k[1]] <- feromonas[ruta_k[length(ruta_k)], ruta_k[1]] + Q / costo_k\n  }\n  \n  # Guardar evolución\n  historial_costo_aco <- c(historial_costo_aco, mejor_costo_aco)\n  \n  # (Opcional: ver progreso)\n  #if (iter %% 50 == 0) cat(\"Iteración:\", iter, \"- Mejor costo hasta ahora:\", mejor_costo_aco, \"\\n\")\n}\n\n# Mostar resultados\ncat(\"\\nLa mejor ruta se obtuvo en la iteración \", mejor_iteracion_aco, \"\\nEl costo total de la mejor ruta fue de $\", format(mejor_costo_aco, big.mark=\",\"), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nLa mejor ruta se obtuvo en la iteración  96 \nEl costo total de la mejor ruta fue de $ 3,271,872 \n```\n\n\n:::\n:::\n\n\n\n### **Visualización de resultados del ACO aplicado al TSP**\n\n#### **Evolución del costo total a través de las iteraciones**\n\nLa **Figura 4** muestra cómo evolucionó el Costo Total a través de 500 generaciones. Se observa que el algoritmo de colonia de hormigas presentó una rápida convergencia en las primeras generaciones, alcanzando una solución estable alrededor de la iteración 96. A partir de ese momento, el costo total se mantuvo constante, lo que indica que el conjunto de hormigas ha refinado su búsqueda alrededor de una solución de bajo costo.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Crear dataframe del historial de costos del ACO\ndf_historial_aco <- data.frame(\n  Iteracion = 1:length(historial_costo_aco),\n  CostoTotal = historial_costo_aco\n)\n\n# Encontrar el mejor costo y la iteración donde se logró\nmejor_costo_aco <- min(df_historial_aco$CostoTotal)\nmejor_iteracion_aco <- df_historial_aco$Iteracion[which.min(df_historial_aco$CostoTotal)]\n\n# Crear el texto para la anotación\ntexto_anotacion_aco <- paste0(\n  \"Iteración: \", mejor_iteracion_aco, \n  \"\\nCosto: \", format(round(mejor_costo_aco, 0), big.mark = \",\")\n)\n\n# Graficar la evolución del costo en el ACO\nggplot(df_historial_aco, aes(x = Iteracion, y = CostoTotal)) +\n  geom_line(color = \"darkgreen\", size = 1) +\n  geom_point(color = \"forestgreen\", size = 1.5) +\n  annotate(\"point\", \n           x = mejor_iteracion_aco, \n           y = mejor_costo_aco, \n           color = \"red\", \n           size = 4) +\n  annotate(\"text\",\n           x = mejor_iteracion_aco + 20,  # desplazar el texto para que no tape el punto\n           y = mejor_costo_aco,\n           label = texto_anotacion_aco,\n           hjust = 0,\n           vjust = -0.5,\n           size = 4,\n           color = \"black\",\n           fontface = \"bold\") +\n  theme_minimal() +\n  labs(\n    title = \"Evolución del Costo Total en el Algoritmo de Colonia de Hormigas (ACO)\",\n    x = \"Iteración\",\n    y = \"Costo Total\"\n  ) +\n  theme(\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 14),\n    axis.title = element_text(face = \"bold\", size = 12),\n    axis.text = element_text(size = 10)\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/evolucionCostoACO-1.png){width=768}\n:::\n:::\n\n\n\n**Figura 4.** *Evolución del Costo Total en el ACO a través de 500 iteraciones.*\n\n#### **Visualización de la mejor ruta**\n\nLa **Tabla 3** muestra la mejor ruta hallada por ACO, que corresponde al *costo total mínimo de \\$3.271.872,* entre las 13 ciudades de Colombia en el orden que deben recorrerse.\n\n**Tabla 3.** *Orden en que deben recorrerse las 13 ciudades en la mejor ruta obtenida por ACO.*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ruta completa (cerrando el ciclo)\nruta_completa_aco <- c(mejor_ruta_aco, mejor_ruta_aco[1])\n\n# Extraer ciudades según el orden\nruta_ciudades_aco <- CiudadesUbicacion[ruta_completa_aco, ]\n\n# Agregar orden de visita\nruta_ciudades_aco$Orden <- 1:nrow(ruta_ciudades_aco)\n\n# Mostrar la mejor ruta en una tabla\nknitr::kable(ruta_ciudades_aco[, c(\"Ciudad\", \"Orden\")], \n             col.names = c(\"Ciudad\", \"Orden de visita\")) %>%\n  kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"), full_width = FALSE, position = \"center\") %>%\n  column_spec(1, bold = TRUE, width = \"10em\") %>%\n  column_spec(2, width = \"5em\") %>%\n  row_spec(0, bold = TRUE, color = \"white\", background = \"#4682B4\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-hover table-condensed table-responsive\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;font-weight: bold;color: white !important;background-color: rgba(70, 130, 180, 255) !important;\"> Ciudad </th>\n   <th style=\"text-align:right;font-weight: bold;color: white !important;background-color: rgba(70, 130, 180, 255) !important;\"> Orden de visita </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;width: 10em; font-weight: bold;\"> Pasto </td>\n   <td style=\"text-align:right;width: 5em; \"> 1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10em; font-weight: bold;\"> Neiva </td>\n   <td style=\"text-align:right;width: 5em; \"> 2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10em; font-weight: bold;\"> Ibagué </td>\n   <td style=\"text-align:right;width: 5em; \"> 3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10em; font-weight: bold;\"> Bogotá </td>\n   <td style=\"text-align:right;width: 5em; \"> 4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10em; font-weight: bold;\"> Bucaramanga </td>\n   <td style=\"text-align:right;width: 5em; \"> 5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10em; font-weight: bold;\"> Cúcuta </td>\n   <td style=\"text-align:right;width: 5em; \"> 6 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10em; font-weight: bold;\"> Santa Marta </td>\n   <td style=\"text-align:right;width: 5em; \"> 7 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10em; font-weight: bold;\"> Barranquilla </td>\n   <td style=\"text-align:right;width: 5em; \"> 8 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10em; font-weight: bold;\"> Cartagena </td>\n   <td style=\"text-align:right;width: 5em; \"> 9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10em; font-weight: bold;\"> Medellín </td>\n   <td style=\"text-align:right;width: 5em; \"> 10 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10em; font-weight: bold;\"> Manizales </td>\n   <td style=\"text-align:right;width: 5em; \"> 11 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10em; font-weight: bold;\"> Pereira </td>\n   <td style=\"text-align:right;width: 5em; \"> 12 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10em; font-weight: bold;\"> Cali </td>\n   <td style=\"text-align:right;width: 5em; \"> 13 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10em; font-weight: bold;\"> Pasto </td>\n   <td style=\"text-align:right;width: 5em; \"> 14 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\nLa **Figura 5** muestra la superposición de la mejor ruta hallada por ACO en el mapa de Colombia.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Texto para mostrar el costo total\ncosto_aco_texto <- paste0(\"Costo total (ACO): $\", format(round(mejor_costo_aco, 0), big.mark = \",\"))\n\n# Íconos personalizados\nicono_inicio <- awesomeIcons(icon = 'flag', markerColor = 'green', iconColor = 'white', library = 'fa')\nicono_fin    <- awesomeIcons(icon = 'flag', markerColor = 'red', iconColor = 'white', library = 'fa')\n\n# Crear el mapa\nleaflet() %>%\n  addProviderTiles(providers$CartoDB.Positron) %>%\n  \n  # Marcar ciudad de inicio\n  addAwesomeMarkers(\n    lng = ruta_ciudades_aco$Longitud[1],\n    lat = ruta_ciudades_aco$Latitud[1],\n    icon = icono_inicio,\n    popup = paste(\"Inicio:\", ruta_ciudades_aco$Ciudad[1])\n  ) %>%\n  \n  # Marcar ciudad final (última antes de cerrar el ciclo)\n  addAwesomeMarkers(\n    lng = ruta_ciudades_aco$Longitud[nrow(ruta_ciudades_aco) - 1],\n    lat = ruta_ciudades_aco$Latitud[nrow(ruta_ciudades_aco) - 1],\n    icon = icono_fin,\n    popup = paste(\"Fin:\", ruta_ciudades_aco$Ciudad[nrow(ruta_ciudades_aco) - 1])\n  ) %>%\n  \n  # Puntos azules para las demás ciudades\n  addCircleMarkers(\n    data = ruta_ciudades_aco,\n    lng = ~Longitud,\n    lat = ~Latitud,\n    radius = 6,\n    color = \"blue\",\n    fillOpacity = 0.8,\n    label = ~paste0(Orden, \". \", Ciudad),\n    popup = ~paste(\"Ciudad:\", Ciudad, \"<br>\", \"Orden:\", Orden)\n  ) %>%\n  \n  # Ruta roja\n  addPolylines(\n    data = ruta_ciudades_aco,\n    lng = ~Longitud,\n    lat = ~Latitud,\n    color = \"red\",\n    weight = 3,\n    opacity = 0.8\n  ) %>%\n  \n  # Costo total\n  addControl(\n    html = paste0(\"<b>Costo total ACO: $\", format(round(mejor_costo_aco, 0), big.mark = \",\"), \"</b>\"),\n    position = \"bottomleft\"\n  )\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"leaflet html-widget html-fill-item\" id=\"htmlwidget-b19a6bd2e19d63a01106\" style=\"width:100%;height:487px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-b19a6bd2e19d63a01106\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addProviderTiles\",\"args\":[\"CartoDB.Positron\",null,null,{\"errorTileUrl\":\"\",\"noWrap\":false,\"detectRetina\":false}]},{\"method\":\"addAwesomeMarkers\",\"args\":[1.2078,-77.27719999999999,{\"icon\":\"flag\",\"markerColor\":\"green\",\"iconColor\":\"white\",\"spin\":false,\"squareMarker\":false,\"iconRotate\":0,\"font\":\"monospace\",\"prefix\":\"fa\"},null,null,{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},\"Inicio: Pasto\",null,null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addAwesomeMarkers\",\"args\":[3.4206,-76.5222,{\"icon\":\"flag\",\"markerColor\":\"red\",\"iconColor\":\"white\",\"spin\":false,\"squareMarker\":false,\"iconRotate\":0,\"font\":\"monospace\",\"prefix\":\"fa\"},null,null,{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},\"Fin: Cali\",null,null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addCircleMarkers\",\"args\":[[1.2078,2.9345,4.4333,4.7111,7.1333,7.8942,11.2419,10.9833,10.4,6.2308,5.1,4.8143,3.4206,1.2078],[-77.27719999999999,-75.2809,-75.2333,-74.0722,-73,-72.5039,-74.20529999999999,-74.8019,-75.5,-75.59059999999999,-75.55,-75.69459999999999,-76.5222,-77.27719999999999],6,null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"blue\",\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"blue\",\"fillOpacity\":0.8},null,null,[\"Ciudad: Pasto <br> Orden: 1\",\"Ciudad: Neiva <br> Orden: 2\",\"Ciudad: Ibagué <br> Orden: 3\",\"Ciudad: Bogotá <br> Orden: 4\",\"Ciudad: Bucaramanga <br> Orden: 5\",\"Ciudad: Cúcuta <br> Orden: 6\",\"Ciudad: Santa Marta <br> Orden: 7\",\"Ciudad: Barranquilla <br> Orden: 8\",\"Ciudad: Cartagena <br> Orden: 9\",\"Ciudad: Medellín <br> Orden: 10\",\"Ciudad: Manizales <br> Orden: 11\",\"Ciudad: Pereira <br> Orden: 12\",\"Ciudad: Cali <br> Orden: 13\",\"Ciudad: Pasto <br> Orden: 14\"],null,[\"1. Pasto\",\"2. Neiva\",\"3. Ibagué\",\"4. Bogotá\",\"5. Bucaramanga\",\"6. Cúcuta\",\"7. Santa Marta\",\"8. Barranquilla\",\"9. Cartagena\",\"10. Medellín\",\"11. Manizales\",\"12. Pereira\",\"13. Cali\",\"14. Pasto\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addPolylines\",\"args\":[[[[{\"lng\":[-77.27719999999999,-75.2809,-75.2333,-74.0722,-73,-72.5039,-74.20529999999999,-74.8019,-75.5,-75.59059999999999,-75.55,-75.69459999999999,-76.5222,-77.27719999999999],\"lat\":[1.2078,2.9345,4.4333,4.7111,7.1333,7.8942,11.2419,10.9833,10.4,6.2308,5.1,4.8143,3.4206,1.2078]}]]],null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"red\",\"weight\":3,\"opacity\":0.8,\"fill\":false,\"fillColor\":\"red\",\"fillOpacity\":0.2,\"smoothFactor\":1,\"noClip\":false},null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addControl\",\"args\":[\"<b>Costo total ACO: $3,271,872<\\/b>\",\"bottomleft\",null,\"info legend\"]}],\"limits\":{\"lat\":[1.2078,11.2419],\"lng\":[-77.27719999999999,-72.5039]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n**Figura 5.** Superposición de la mejor ruta obtenida por ACO en el mapa de Colombia.\n\n### Recorrido óptimo animado mejor ruta ACO\n\nLa **Figura 6** muestra una animación del recorrido a través de la mejor ruta encontrada usando ACO aplicado al TSG.\n\n![](GifACO.gif){fig-align=\"center\"}\n\n**Figura 6.** *Animación del recorrido óptima encontrada usando ACO aplicado al TSG*.\n\n### Verificación de la calidad de la solución del ACO aplicado al TSP\n\nAunque los algoritmos metaheurísticos no garantizan la optimalidad global, el comportamiento observado en la evolución del costo sugiere que el algoritmo de colonia de hormigas (ACO) fue eficiente para encontrar una solución competitiva al problema del viajante bajo condiciones realistas.\n\nEl ACO se aplicó para resolver una instancia del problema del viajante, con el objetivo de minimizar el costo total de recorrer todas las ciudades y regresar al punto de partida. Dado que el número de rutas posibles crece factorialmente con la cantidad de ciudades, una evaluación exhaustiva por fuerza bruta es impracticable, lo que hace esencial analizar la calidad de la solución obtenida a partir de los resultados empíricos del algoritmo.\n\nDurante las 500 iteraciones ejecutadas, el ACO mostró un patrón típico de convergencia eficiente: el costo total disminuyó rápidamente en las primeras iteraciones y se estabilizó alrededor de la iteración 90. A partir de ese punto, el algoritmo mantuvo consistentemente la mejor solución, lo que indica que las feromonas guiaron a las hormigas hacia una ruta sólida, iterativamente reforzada como la mejor alternativa encontrada.\n\nEste patrón de estabilización sugiere que el algoritmo alcanzó un óptimo local robusto. Si bien los métodos metaheurísticos no garantizan encontrar la solución óptima global, la combinación de una rápida convergencia, la estabilidad mantenida durante más del 90% de las iteraciones y la coherencia en los resultados permiten concluir que la solución obtenida es razonablemente buena en términos de eficiencia y costo.\n\nEl valor final alcanzado fue de \\$3,271,872, el cual se mantuvo inalterado en todas las iteraciones posteriores a la convergencia. Este comportamiento, junto con la tendencia descendente y estable de la función objetivo, respalda la confiabilidad y solidez de la solución obtenida mediante este enfoque bioinspirado.\n\n## Comparación entre el GA y ACO aplicados al TSG\n\nTanto el Algoritmo Genético (GA) como la Colonia de Hormigas (ACO) son enfoques metaheurísticos inspirados en procesos naturales, aplicados en este trabajo a la resolución del Problema del Viajante de Comercio (TSP). Ambos buscan encontrar rutas óptimas minimizando el costo total del recorrido, que considera tiempo de desplazamiento, consumo de combustible y peajes. Aunque ambos métodos son de naturaleza estocástica y no garantizan la optimalidad global, presentan diferencias notables en su enfoque, comportamiento y resultados.\n\nDesde el punto de vista computacional, el GA emplea operadores de evolución genética -como selección, cruce y mutación- para explorar el espacio de soluciones, generando diversidad entre generaciones y favoreciendo combinaciones prometedoras. Por su parte, el ACO simula el comportamiento colectivo de las hormigas depositando y evaporando feromonas, construyendo soluciones de manera probabilística e incremental, guiadas por la experiencia acumulada.\n\nEn cuanto a los resultados obtenidos, ambos algoritmos convergieron a soluciones estables en un número razonable de iteraciones. El ACO se destacó por su rápida convergencia, alcanzando su mejor solución alrededor de la iteración 96 y manteniéndola constante durante el resto del proceso. El GA, en cambio, mostró una mejora más progresiva y continua, permitiendo pequeñas optimizaciones incluso en etapas avanzadas del ciclo evolutivo.\n\nEn términos de calidad de la solución, ambos métodos arrojaron rutas de costo muy similar, aunque no necesariamente idénticas. Esto sugiere que, pese a sus diferencias internas, cada algoritmo fue capaz de explorar zonas similares del espacio de soluciones, lo que refuerza la solidez de los resultados encontrados. Además, la convergencia de ambos métodos hacia soluciones estables ofrece evidencia empírica de que dichas soluciones se ubican en regiones de alta calidad dentro del espacio del problema.\n\nEn cuanto a interpretabilidad y ajuste, el GA ofrece una mayor flexibilidad en la manipulación de operadores genéticos y estrategias de cruce, mientras que el ACO se beneficia de una dinámica colectiva más estable una vez ajustados correctamente sus parámetros ($\\alpha$, $\\beta$, evaporación y número de hormigas).\n\nAmbos algoritmos resultaron efectivos en la resolución del problema propuesto, y la comparación de sus resultados evidencia que, con configuraciones adecuadas, tanto el enfoque evolutivo como el bioinspirado pueden alcanzar soluciones de alta calidad. La elección entre uno u otro dependerá del contexto, la facilidad de ajuste, la sensibilidad a los parámetros y el tipo de convergencia deseado en problemas similares.\n\nEn resumen, ambos algoritmos permiten abordar el TSP de manera eficiente, evitando el alto costo computacional de los métodos exactos. La calidad de las soluciones es elevada, considerando la complejidad combinatoria del problema. La representación gráfica de las rutas facilita la validación y comunicación de los resultados. La elección entre GA y ACO dependerá de las características específicas del problema, la facilidad de ajuste de parámetros y el tipo de convergencia deseado.\n\nLa **Tabla 4** presenta un resumen comparativo de las características de las simulaciones realizadas con GA y ACO para resolver el TSG.\n\n**Tabla 4.** *Comparación de características y resultados: GA vs. ACO aplicados al TSG.*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntabla_comp <- data.frame(\n  \"Criterio\" = c(\n    \"Inspiración\",\n    \"Construcción de soluciones\",\n    \"Velocidad de convergencia\",\n    \"Diversidad de soluciones\",\n    \"Sensibilidad a parámetros\",\n    \"Estabilidad de resultados\",\n    \"Mejor iteración lograda\",\n    \"Costo total alcanzado\",\n    \"Interpretabilidad\",\n    \"Fortalezas\",\n    \"Debilidades\"\n  ),\n  \"Algoritmo Genético (GA)\" = c(\n    \"Evolución natural (selección, cruza, mutación)\",\n    \"Recombina soluciones completas para generar nuevas poblaciones\",\n    \"Moderada (mejora progresiva en varias etapas)\",\n    \"Alta diversidad gracias a mutaciones y recombinación\",\n    \"Alta: requiere ajuste fino de cruza, mutación y tamaño de población\",\n    \"Puede oscilar en fases avanzadas (dependiendo del azar y cruce)\",\n    \"Iteración 253\",\n    \"~$3.369.197\",\n    \"Alta: permite seguimiento de operadores y evolución\",\n    \"Explora más ampliamente el espacio de soluciones\",\n    \"Requiere control de diversidad para evitar estancamiento\"\n  ),\n  \"Colonia de Hormigas (ACO)\" = c(\n    \"Comportamiento colectivo de hormigas y feromonas\",\n    \"Construye rutas paso a paso con base en probabilidad\",\n    \"Alta (mejora rápida en primeras iteraciones, estabilización temprana)\",\n    \"Menor diversidad, favorece la explotación de buenas soluciones\",\n    \"Media-alta: depende de α, β, evaporación, número de hormigas\",\n    \"Alta estabilidad tras converger a una buena ruta\",\n    \"Iteración 96\",\n    \"~$3.271.872\",\n    \"Media: soluciones emergen de dinámica colectiva\",\n    \"Explota rutas prometedoras rápidamente y converge de forma robusta\",\n    \"Puede converger prematuramente a óptimos locales\"\n  ),\n  check.names = FALSE  # <- ¡Esto es lo importante!\n)\n\nkable(tabla_comp, \"html\", caption = \"Tabla 4. Comparación de características y resultados: GA vs. ACO aplicados al TSP.\") %>%\n  kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"), \n                full_width = FALSE, \n                position = \"center\") %>%\n  column_spec(1, bold = TRUE, width = \"17em\") %>%\n  column_spec(2, width = \"20em\") %>%\n  column_spec(3, width = \"20em\") %>%\n  row_spec(0, bold = TRUE, color = \"white\", background = \"#4682B4\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-hover table-condensed table-responsive\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n<caption>Tabla 4. Comparación de características y resultados: GA vs. ACO aplicados al TSP.</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;font-weight: bold;color: white !important;background-color: rgba(70, 130, 180, 255) !important;\"> Criterio </th>\n   <th style=\"text-align:left;font-weight: bold;color: white !important;background-color: rgba(70, 130, 180, 255) !important;\"> Algoritmo Genético (GA) </th>\n   <th style=\"text-align:left;font-weight: bold;color: white !important;background-color: rgba(70, 130, 180, 255) !important;\"> Colonia de Hormigas (ACO) </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;width: 17em; font-weight: bold;\"> Inspiración </td>\n   <td style=\"text-align:left;width: 20em; \"> Evolución natural (selección, cruza, mutación) </td>\n   <td style=\"text-align:left;width: 20em; \"> Comportamiento colectivo de hormigas y feromonas </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 17em; font-weight: bold;\"> Construcción de soluciones </td>\n   <td style=\"text-align:left;width: 20em; \"> Recombina soluciones completas para generar nuevas poblaciones </td>\n   <td style=\"text-align:left;width: 20em; \"> Construye rutas paso a paso con base en probabilidad </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 17em; font-weight: bold;\"> Velocidad de convergencia </td>\n   <td style=\"text-align:left;width: 20em; \"> Moderada (mejora progresiva en varias etapas) </td>\n   <td style=\"text-align:left;width: 20em; \"> Alta (mejora rápida en primeras iteraciones, estabilización temprana) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 17em; font-weight: bold;\"> Diversidad de soluciones </td>\n   <td style=\"text-align:left;width: 20em; \"> Alta diversidad gracias a mutaciones y recombinación </td>\n   <td style=\"text-align:left;width: 20em; \"> Menor diversidad, favorece la explotación de buenas soluciones </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 17em; font-weight: bold;\"> Sensibilidad a parámetros </td>\n   <td style=\"text-align:left;width: 20em; \"> Alta: requiere ajuste fino de cruza, mutación y tamaño de población </td>\n   <td style=\"text-align:left;width: 20em; \"> Media-alta: depende de α, β, evaporación, número de hormigas </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 17em; font-weight: bold;\"> Estabilidad de resultados </td>\n   <td style=\"text-align:left;width: 20em; \"> Puede oscilar en fases avanzadas (dependiendo del azar y cruce) </td>\n   <td style=\"text-align:left;width: 20em; \"> Alta estabilidad tras converger a una buena ruta </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 17em; font-weight: bold;\"> Mejor iteración lograda </td>\n   <td style=\"text-align:left;width: 20em; \"> Iteración 253 </td>\n   <td style=\"text-align:left;width: 20em; \"> Iteración 96 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 17em; font-weight: bold;\"> Costo total alcanzado </td>\n   <td style=\"text-align:left;width: 20em; \"> ~$3.369.197 </td>\n   <td style=\"text-align:left;width: 20em; \"> ~$3.271.872 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 17em; font-weight: bold;\"> Interpretabilidad </td>\n   <td style=\"text-align:left;width: 20em; \"> Alta: permite seguimiento de operadores y evolución </td>\n   <td style=\"text-align:left;width: 20em; \"> Media: soluciones emergen de dinámica colectiva </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 17em; font-weight: bold;\"> Fortalezas </td>\n   <td style=\"text-align:left;width: 20em; \"> Explora más ampliamente el espacio de soluciones </td>\n   <td style=\"text-align:left;width: 20em; \"> Explota rutas prometedoras rápidamente y converge de forma robusta </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 17em; font-weight: bold;\"> Debilidades </td>\n   <td style=\"text-align:left;width: 20em; \"> Requiere control de diversidad para evitar estancamiento </td>\n   <td style=\"text-align:left;width: 20em; \"> Puede converger prematuramente a óptimos locales </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n# **Conclusiones**\n\n-   Tanto los algoritmos genéticos (GA) como la colonia de hormigas (ACO) demostraron ser herramientas adecuadas y eficientes para resolver el Problema del Viajante de Comercio (TSP) en el contexto colombiano, integrando parámetros de costo realistas como tiempo de desplazamiento, consumo de combustible y peajes.\n\n-   Ambos enfoques metaheurísticos permitieron minimizar de manera efectiva el costo total del recorrido, encontrando rutas competitivas en términos de eficiencia y viabilidad práctica, a pesar de la naturaleza combinatoria y la imposibilidad de garantizar la optimalidad global.\n\n-   La visualización geográfica de las rutas óptimas, mediante mapas interactivos, aportó un valor significativo al análisis y validación de los resultados, facilitando la interpretación y comunicación de las soluciones encontradas.\n\n-   Se observó que el ACO tiende a converger más rápidamente hacia una solución estable, mientras que el GA presenta una mejora progresiva y continua a lo largo de las generaciones. Sin embargo, ambos algoritmos alcanzaron soluciones de calidad comparable, lo que refuerza la robustez de los métodos metaheurísticos para este tipo de problemas.\n\n-   Como líneas de trabajo futuro, se recomienda profundizar en la optimización de los hiperparámetros de ambos algoritmos, así como explorar la comparación con otros enfoques metaheurísticos o híbridos. Además, la incorporación de restricciones adicionales o escenarios dinámicos podría enriquecer el análisis y la aplicabilidad de los resultados.\n\n# **Referencias**\n\n::: bibliografia-apa\nApplegate, D. L., Bixby, R. E., Chvátal, V., & Cook, W. J. (2006). *The Traveling Salesman Problem: A Computational Study*. Princeton University Press. <br>\n\nC3 Care Car Center. (2025). Todo sobre el Spark GT Chevrolet: Rendimiento y mantenimiento. <https://www.c3carecarcenter.com/blog/todo-sobre-el-spark-gt-chevrolet-rendimiento-y-mantenimiento/><br>\n\nDorigo, M., Maniezzo, V., & Colorni, A. (1996). Ant system: Optimization by a colony of cooperating agents. *IEEE Transactions on Systems, Man, and Cybernetics, Part B (Cybernetics)*, 26(1), 29–41. <https://doi.org/10.1109/3477.484436><br>\n\nDorigo, M., & Stützle, T. (2004). Ant Colony Optimization. MIT Press.<br>\n\nGeodatos.net. (s.f.). Distancia entre ciudades de Colombia. <https://www.geodatos.net/distancias/ciudades/colombia><br>\n\nGonçalves, J. F., Mendes, J. J. M., & Resende, M. G. C. (2005). A hybrid genetic algorithm for the job shop scheduling problem. European Journal of Operational Research, 167(1), 77-95.<br>\n\nGoodfellow, I., Bengio, Y., & Courville, A. (2016). *Deep Learning*. MIT Press. <https://www.deeplearningbook.org/><br>\n\nHolland, J. H. (1975). *Adaptation in Natural and Artificial Systems*. University of Michigan Press.<br>\n\nInfobae. (2025, 6 de enero). *Con proyecto de ley buscan que peajes no puedan ubicarse a menos de 150 kilómetros entre sí*. <https://www.infobae.com/colombia/2025/01/06/con-proyecto-de-ley-buscan-que-peajes-no-puedan-ubicarse-a-menos-de-150-kilometros-entre-si/><br>\n\nMejores Rutas Colombia. (s.f.). *Tabla de distancias entre ciudades de Colombia*. <https://colombia.mejoresrutas.com/tabla-de-distancias/co/><br>\n\nMinisterio de Minas y Energía. (2025). Precios oficiales de combustibles en Colombia. <https://www.minenergia.gov.co/><br>\n\nMitchell, M. (1998). *An Introduction to Genetic Algorithms*. MIT Press.<br>\n\nRevistas Uniboyacá. (s.f.). Aplicación de algoritmos genéticos en problemas de Ingeniería. <https://revistasdigitales.uniboyaca.edu.co><br>\n\nVillalba Fernández de Castro, G. (2004). Algoritmos de optimización combinatoria aplicados al diseño de redes de distribución de agua potable. Uniandes. <http://hdl.handle.net/1992/21519><br>\n\nYahoo Finanzas. (2025). Estos son los carros que consumen menos gasolina en Colombia. <https://es-us.finanzas.yahoo.com/><br>\n\nZhang, A., Lipton, Z. C., Li, M., & Smola, A. J. (2024). Dive into Deep Learning. <https://d2l.ai/><br>\n\nZhang, Y., Li, Y., & Wang, S. (2020). A review of metaheuristics for traveling salesman problem. Applied Soft Computing, 97, 106801.<br>\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n<link href=\"../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"../../site_libs/leaflet-1.3.1/leaflet.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/leaflet-1.3.1/leaflet.js\"></script>\n<link href=\"../../site_libs/leafletfix-1.0.0/leafletfix.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/proj4-2.6.2/proj4.min.js\"></script>\n<script src=\"../../site_libs/Proj4Leaflet-1.0.1/proj4leaflet.js\"></script>\n<link href=\"../../site_libs/rstudio_leaflet-1.3.1/rstudio_leaflet.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/leaflet-binding-2.2.2/leaflet.js\"></script>\n<script src=\"../../site_libs/leaflet-providers-2.0.0/leaflet-providers_2.0.0.js\"></script>\n<script src=\"../../site_libs/leaflet-providers-plugin-2.2.2/leaflet-providers-plugin.js\"></script>\n<link href=\"../../site_libs/leaflet-awesomemarkers-2.0.3/leaflet.awesome-markers.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/leaflet-awesomemarkers-2.0.3/leaflet.awesome-markers.min.js\"></script>\n<link href=\"../../site_libs/fontawesome-4.7.0/font-awesome.min.css\" rel=\"stylesheet\" />\n<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}